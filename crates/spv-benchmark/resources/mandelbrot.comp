#version 460
//GLSL Compute shader that adds a constant.

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : require
#include "shared.glsl"



layout( push_constant ) uniform Push{
  ResHandle src;
  ResHandle dst;
  uint width;
  uint height;
} push;

layout(set = 0, binding = 0) buffer GlobalBuffers{
    float dta[];
} global_buffer[];


float calculation(vec2 coord, vec2 p){

    uint n = 0;
    vec2 z = coord * n;

    while ((n < 1024) && (length(z) < 1000.0)){
        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + p;
        n += 1;
    }

    return 0.5 * 0.5 * cos(3.0 * 0.05 * (n - (log2(log2(dot(z,z))))));
}

//running in 64 waves
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main(){
  uvec2 widx = gl_GlobalInvocationID.xy;

  if (widx.x >= push.width || widx.y >= push.height){
      return;
  }

  vec2 uv = vec2(widx) / vec2(push.width, push.height);
  vec2 p = vec2(-2.0, -1.0) + 2.0 * uv;
  float c = calculation(vec2(widx), p);

  uint safeat = (widx.y * push.width) + widx.x;

  global_buffer[get_index(push.dst)].dta[safeat] = c;
}
